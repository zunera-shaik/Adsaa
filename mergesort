import java.util.Scanner;

public class MergeSort {

    private static int[] b;

    public static void mergeSort(int[] a, int low, int high) {
        if (low < high) {
            int mid = (low + high) / 2;
            mergeSort(a, low, mid);
            mergeSort(a, mid + 1, high);
            merge(a, low, mid, high);
        }
    }

    public static void merge(int[] a, int low, int mid, int high) {
        int i = low, j = mid + 1, k = low;

        while (i <= mid && j <= high)
            if (a[i] <= a[j])
                b[k++] = a[i++];
            else
                b[k++] = a[j++];

        // Copy remaining elements from the left subset
        while (i <= mid)
            b[k++] = a[i++];
        while (j <= high)
            b[k++] = a[j++];

        for (int h = low; h <= high; h++)
            a[h] = b[h];
    }

    // Main method to test MergeSort
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of elements in the array:");
        int n = scanner.nextInt();
        int[] array = new int[n];
        b = new int[n];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++)
            array[i] = scanner.nextInt();

        // Time for Average Case
        int[] avgCase = array.clone();
        long startAvg = System.nanoTime();
        mergeSort(avgCase, 0, avgCase.length - 1);
        long endAvg = System.nanoTime();
        System.out.println("\nAverage Case Time: " + (endAvg - startAvg) + " ns");

        // Time for Best Case (already sorted)
        int[] bestCase = avgCase.clone(); // already sorted from above
        long startBest = System.nanoTime();
        mergeSort(bestCase, 0, bestCase.length - 1);
        long endBest = System.nanoTime();
        System.out.println("Best Case Time: " + (endBest - startBest) + " ns");

        // Time for Worst Case (descending order)
        int[] worstCase = new int[n];
        for (int i = 0; i < n; i++)
            worstCase[i] = array[n - 1 - i];
        long startWorst = System.nanoTime();
        mergeSort(worstCase, 0, worstCase.length - 1);
        long endWorst = System.nanoTime();
        System.out.println("Worst Case Time: " +

	
