import java.util.Arrays;

class MaxHeap {
    int[] arr;
    int maxSize, heapSize;

    MaxHeap(int maxSize){
        this.maxSize = maxSize;
        heapSize = 0;
        arr = new int[maxSize];
    }

    int parent(int i){
        return (i-1)/2;
    }

    int lChild(int i){
        return 2*i + 1;
    }

    int rChild(int i){
        return 2*i + 2;
    }

    void MaxHeapify(int i) {
        int l = lChild(i);
        int r = rChild(i);
        int largest = i;
        if (l < heapSize && arr[l] > arr[largest])
            largest = l;
        if (r < heapSize && arr[r] > arr[largest])
            largest = r;
        if (largest != i) {
            int temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp;
            MaxHeapify(largest);
        }
    }

    void removeMax() {
        if (heapSize <= 0) {
            System.out.println("Heap is empty");
            return;
        }
        if (heapSize == 1) {
            heapSize--;
            return;
        }

        arr[0] = arr[heapSize - 1];
        heapSize--;
        MaxHeapify(0);
    }

    int getMax(){
        return arr[0];
    }

    int curSize() {
        return heapSize;
    }

    void insertKey(int x) {
        if (heapSize == maxSize) {
            System.out.println("\nOverflow: Could not insertKey\n");
            return;
        }

        int i = heapSize;
        arr[i] = x;
        heapSize++;

        while (i != 0 && arr[parent(i)] < arr[i]) {
            int temp = arr[i];
            arr[i] = arr[parent(i)];
            arr[parent(i)] = temp;
            i = parent(i);
        }
    }

    void deleteKey(int key) {
        int index = -1;
        for (int i = 0; i < heapSize; i++) {
            if (arr[i] == key) {
                index = i;
                break;
            }
        }

        if (index == -1) {
            System.out.println("Key not found in the heap.");
            return;
        }

        // Replace with last element and reduce size
        arr[index] = arr[heapSize - 1];
        heapSize--;

        // Restore heap property
        MaxHeapify(index);
        while (index != 0 && arr[parent(index)] < arr[index]) {
            int temp = arr[index];
            arr[index] = arr[parent(index)];
            arr[parent(index)] = temp;
            index = parent(index);
        }
    }

    void displayHeap() {
        System.out.print("Heap content: ");
        for (int i = 0; i < heapSize; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        MaxHeap h = new MaxHeap(15);
        int elements[] = {3, 10, 12, 8, 2, 14};

        for (int e : elements)
            h.insertKey(e);

        System.out.println("Initial Heap:");
        h.displayHeap();

        System.out.println("Max element: " + h.getMax());

        h.removeMax();
        System.out.println("\nAfter removing max:");
        h.displayHeap();

        h.insertKey(15);
        h.insertKey(5);

        System.out.println("\nAfter inserting 15 and 5:");
        h.displayHeap();

        System.out.println("\nDeleting element 8:");
        h.deleteKey(8);
        h.displayHeap();

        System.out.println("Current Max: " + h.getMax());
    }
}
