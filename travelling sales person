import java.util.*;

public class TSP {
    static final int INF = 999;
    static int n = 4;

    public static void main(String[] args) {
        int[][] cost = {
            {INF, 10, 15, 20},
            {10, INF, 35, 25},
            {15, 35, INF, 30},
            {20, 25, 30, INF}
        };
        PriorityQueue<State> q = new PriorityQueue<>();
        q.add(new State(new ArrayList<>(List.of(0)), cost, 0, 0));
        while (!q.isEmpty()) {
            State s = q.poll();
            if (s.path.size() == n) {
                s.cost += cost[s.city][0];
                s.path.add(0);
                System.out.println("Path: " + s.path + ", Cost: " + s.cost);
                break;
            }
            for (int i = 0; i < n; i++)
                if (!s.path.contains(i))
                    q.add(new State(new ArrayList<>(s.path), cost, s.cost + cost[s.city][i], i));
        }
    }

    static class State implements Comparable<State> {
        List<Integer> path;
        int cost, city;
        State(List<Integer> p, int[][] c, int cost, int city) {
            this.path = p; this.cost = cost; this.city = city; path.add(city);
        }
        public int compareTo(State o) { return this.cost - o.cost; }
    }
}
