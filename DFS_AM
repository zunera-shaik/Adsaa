import java.util.*;

class DFSMatrix {
    static void dfsRec(int[][] adj, boolean[] visited, int s) {
        visited[s] = true;
        System.out.print(s + " ");
        for (int i = 0; i < adj.length; i++) {
            if (adj[s][i] == 1 && !visited[i]) {
                dfsRec(adj, visited, i);
            }
        }
    }
    
    static void dfs(int[][] adj, int s) {
        boolean[] visited = new boolean[adj.length];
        dfsRec(adj, visited, s);
    }
    
    static void addEdge(int[][] adj, int u, int v) {
        adj[u][v] = 1;
        adj[v][u] = 1; 
    }
    
    public static void main(String[] args) {
        int V = 5; 
        int[][] adj = new int[V][V];
        int[][] edges = { { 1, 2 }, { 1, 0 }, { 2, 0 }, { 2, 3 }, { 2, 4 } };
        
        for (int[] e : edges) {
            addEdge(adj, e[0], e[1]);
        }
        dfs(adj, 0);
    }
}
