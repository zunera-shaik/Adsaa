import java.util.*;

class SingleAL {
    static class Node {
        int v, w;
        Node(int v, int w) { this.v = v; this.w = w; }
    }

    public static int[] dijkstra(int V, List<List<Node>> graph, int src) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(n -> n.w));
        pq.add(new Node(src, 0));

        while (!pq.isEmpty()) {
            Node cur = pq.poll();
            for (Node n : graph.get(cur.v)) {
                if (dist[cur.v] + n.w < dist[n.v]) {
                    dist[n.v] = dist[cur.v] + n.w;
                    pq.add(new Node(n.v, dist[n.v]));
                }
            }
        }
        return dist;
    }

    public static void main(String[] args) {
        int V = 9;
        List<List<Node>> graph = new ArrayList<>(Collections.nCopies(V, new ArrayList<>()));
        int[][] edges = {
            {0, 1, 4}, {0, 7, 8}, {1, 2, 8}, {1, 7, 11}, {2, 3, 7}, {2, 8, 2}, {2, 5, 4},
            {3, 4, 9}, {3, 5, 14}, {4, 5, 10}, {5, 6, 2}, {6, 7, 1}, {6, 8, 6}, {7, 8, 7}
        };
        for (int[] e : edges) {
            graph.get(e[0]).add(new Node(e[1], e[2]));
            graph.get(e[1]).add(new Node(e[0], e[2]));
        }

        int[] dist = dijkstra(V, graph, 0);
        System.out.println("Vertex \t Distance from Source");
        for (int i = 0; i < V; i++) System.out.println(i + " \t " + dist[i]);
    }
}
